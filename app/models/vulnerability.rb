class Vulnerability < ApplicationRecord
  belongs_to :user
  has_many :vulnerability_history, dependent: :destroy

  after_create_commit :start_history
  after_update_commit :change_statuses_history

  validates_presence_of :name, :status, :user

  enum impact: { low: 0, medium: 1, high: 2 }
  enum status: { identified: 0, being_analyzed: 1, fixed: 2 }

  private

  def start_history
    VulnerabilityHistory.create(
      status_quo: Vulnerability.statuses[status.to_sym],
      vulnerability_creation: created_at,
      vulnerability: self,
      user:
    )
  end

  def change_statuses_history
    return unless saved_change_to_status?

    VulnerabilityHistory.create(
      old_status: Vulnerability.statuses[status_before_last_save.to_sym],
      status_quo: Vulnerability.statuses[status.to_sym],
      vulnerability: self,
      user:
    )
  end
end
